@startuml devices_network
    title Devices Network

    cloud "Internet" as Internet {
        database "github.com" as VCServer
        database "npmjs.com" as PackageServer
        database "hub.docker.com" as ContainerServer
        node "travis-ci.com" as CICDServer
        node "coveralls.io" as CoverageServer
        actor "Producer" as Producer
        actor "Consumer" as Consumer
        interface "Ethernet" as Ethernet
        VCServer -( Ethernet
        CICDServer --( Ethernet
        ContainerServer --( Ethernet
        CoverageServer --( Ethernet
        Ethernet )- PackageServer
        Ethernet )-- Producer
        Ethernet )-- Consumer
    }
@enduml

@startuml devices_deployment_cycle
    title Devices Deployment Cycle
    
    actor "Producer" as Producer
    database "github.com" as VCServer
    participant "travis-ci.com" as CICDServer
    database "hub.docker.com" as ContainerServer
    participant "coveralls.io" as CoverageServer
    database "npmjs.com" as PackageServer
    actor "Consumer" as Consumer

    loop
        Producer -> VCServer: sources
        VCServer -> CICDServer: build request
        VCServer <- CICDServer: sources request
        VCServer -> CICDServer: sources
        CICDServer -> ContainerServer: image request
        CICDServer <- ContainerServer: image
        CICDServer -> CICDServer: build
        alt build success
            CICDServer -> CoverageServer: coverage report request
            CoverageServer -> CoverageServer: build coverage report
            CICDServer -> PackageServer: binaries
            ...
            PackageServer <- Consumer: binaries request
            PackageServer -> Consumer: binaries
        else build error
            ...
            PackageServer <- Consumer: binaries request
            alt old binaries exist
                PackageServer -> Consumer: old binaries
            else no binaries
                PackageServer -> Consumer: error
            end
        end
        ...
    end
@enduml

@startuml services_network
    title Services Network
    
    node "github.com" as GITServer {
        database "GIT Repository" as GITRepo
        node "GIT Service" as GITService
        GITRepo <- GITService: use
    }
    interface "Webhooks" as Webhooks
    interface "GIT Interface" as GITInterface
    GITService -- Webhooks
    GITService -- GITInterface
    
    node "npmjs.com" as NPMServer {
        node "NPM Service" as NPMService
        database "NPM Package" as NPMPackage
        NPMService -> NPMPackage: use
    }
    interface "NPM Interface" as NPMInterface
    NPMService -- NPMInterface

    node "travis-ci.com" as CICDServer {
        node "CI/CD Service" as CICDService
    }
    interface "Travis API" as CICDInterface
    CICDService -- CICDInterface
    Webhooks )-- CICDService
    GITInterface )- CICDService
    CICDService --( NPMInterface

    node "hub.docker.com" as ContainerServer {
        node "Continer Service" as ContainerService
    }
    interface "Docker Interface" as ContainerInterface
    ContainerService -- ContainerInterface
    ContainerInterface )-- CICDService
    
    node "coveralls.io" as CoverageServer {
        node "Coverage Service" as CoverageService
    }
    interface "node-coveralls" as CoverageInterface
    CoverageService -- CoverageInterface
    CoverageInterface )-- CICDService
    
    node "Producer" as Producer {
        node "GIT Client" as GITClient
        interface "GIT CLI" as GIT_CLI
        GITClient -- GIT_CLI

        file "Source files" as Sources
        file ".travis.yml" as CICDConf
        file "package.json" as NPMConfig
        ' file "Dockerfile" as DockerCongig
        GITRepo "0..*" o-- Sources
        Sources *-- CICDConf
        Sources *-- NPMConfig
        ' Sources *-- DockerCongig
        GITInterface )-- GITClient
        CICDInterface )-- CICDConf
        NPMInterface )-- NPMConfig
        ' ContainerInterface )-- DockerCongig
    }

    node "Consumer" as Consumer {
        node "NPM Client" as NPMClient
        interface "NPM CLI" as BIN
        NPMInterface )-- NPMClient
        NPMClient -- BIN

        file "Binaries" as Binaries
        interface "JS API" as API
        NPMPackage "0..*" o-- Binaries
        NPMClient -> Binaries: install
        Binaries -- API
    }
@enduml

@startuml build_flow
    title Build Flow
    start
        :Supported Node.js versions: 6,7,8,9,10,11,12}
        while (for each version)
            if (npm i) then (passed)
                -[#green]->
                if (eslint) then (passed)
                    -[#green]->
                    if (jest) then (passed)
                        -[#green]->
                        if (coveralls) then (passed)
                            -[#green]->
                            if (jsdoc) then (passed)
                                -[#green]->
                                if (webpack) then (passed)
                                    -[#green]->
                                    if (npm publish) then (passed)
                                        -[#green]->
                                        :stdout/
                                    else (failed)
                                        (A)
                                    endif
                                else (failed)
                                    (A)
                                endif
                            else (failed)
                                (A)
                            endif
                        else (failed)
                            (A)
                        endif
                    else (failed)
                        (A)
                    endif
                else (failed)
                    (A)
                endif
            else (failed)
                (A)
            endif
        endwhile
    end
    detach
    (A)
    :stderr/
    stop
@enduml