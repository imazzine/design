@startuml devices_network
    title Devices Network

    cloud "Internet" as Internet {
        database "npmjs.com" as PackageServer
        node "Host node" as HostNode
        interface "Ethernet" as Ethernet
        PackageServer --( Ethernet
        Ethernet )-- HostNode
    }
@enduml

@startuml services_network
    skinparam note {
        FontName "Courier New"
    }

    title Services Network

    node "npmjs.com" as NPMServer {
        interface "NPM Interface" as NPMInterface #ffc7fd
        node "NPM Service" as NPMService
        database "NPM Register" as NPMRegister
        NPMService -> NPMRegister: use
        NPMService -- NPMInterface
    }

    node "Host node" as HostNode {

        frame "NPM Global Scope" as NPMGlobalScope {
            package "@imazzine/idk" as IDKPackage {
                artifact "package.json" as PACKAGE_JSON [[./ConfigurationAPI.svg]]
                artifact "idk.js" as IDK_JS
                IDK_JS <.. PACKAGE_JSON: specifying path
            }
        }
        NPMRegister "1..*" o-- IDKPackage

        node "Node.js process" as NodeJS {
            component "IDK Application" as IDKApplication [[./IDKApplication.svg]]
            IDKApplication <-- IDK_JS: execute
        }
        NodeJS --> IDK_JS: evaluate

        node "NPM Client" as NPMClient
        NPMInterface )- NPMClient
        NodeJS <-- NPMClient: run

        interface "bin" as NPMBinAPI [[https://docs.npmjs.com/files/package.json#bin]] #ffc7fd
        NPMClient -- NPMBinAPI

        frame "Command Line" as CommandLine {
            interface "idk" as IDKInterface #c9ffc7
            NPMBinAPI )-- IDKInterface

            interface "npm" as NPMCli [[https://docs.npmjs.com/cli/install]] #c9ffc7
            NPMClient -- NPMCli

            note as NPM_CLI_LIST
                npm i -g @imazzine/idk@0.0.0
            end note
            NPMCli .. NPM_CLI_LIST
        }

        interface "Configuration API" as ConfigurationAPI [[./ConfigurationAPI.svg]] #ffc7fd
        NPMClient --( ConfigurationAPI
        PACKAGE_JSON - ConfigurationAPI

        note as IDK_CLI_LIST
            idk help
            idk version
            idk commands <add|configure|remove> <package_path> [set|unset] [key] [value]
            idk projects <add|configure|remove> <project_path> [set|unset] [key] [value]
            idk list <commands|projects>
            --
            idk lint
            idk test
            idk document
            idk compile [mode]
            idk build
        end note
        IDKInterface .. IDK_CLI_LIST
    }
@enduml

@startuml ConfigurationAPI
    title Configuration API

    object "package.json" as package.json {
        +name: "@imazzine/idk"
        +version: "0.0.0"
        +bin: <Bin>
        +idk: <Idk>
        +dependencies: <Dependencies>
    }

    object "Dependencies" as Dependencies {
        +commander: <string> <b>(2.20.0)</b>
        +@imazzine/idk.help: <string> <b>(0.0.0)</b>
        +@imazzine/idk.version: <string> <b>(0.0.0)</b>
        +@imazzine/idk.commands: <string> <b>(0.0.0)</b>
        +@imazzine/idk.projects: <string> <b>(0.0.0)</b>
        +@imazzine/idk.list: <string> <b>(0.0.0)</b>
        +@imazzine/idk.lint: <string> <b>(0.0.0)</b>
        +@imazzine/idk.test: <string> <b>(0.0.0)</b>
        +@imazzine/idk.document: <string> <b>(0.0.0)</b>
        +@imazzine/idk.compile: <string> <b>(0.0.0)</b>
        +@imazzine/idk.build: <string> <b>(0.0.0)</b>
    }
    package.json "1" *-- "1" Dependencies

    object "Bin" as Bin {
        +idk: <string> <b>("./idk.js")</b>
    }
    package.json "1" *-- "1" Bin

    object "Idk" as Idk {
        +commands: <Array<Command>>
        +projects: <Array<Project>>
    }
    package.json "1" *-- "1" Idk

    object "Command" as Command {
        +path: <string>
        +config: <Object>
    }
    Idk "1" o-- "0..*" Command

    object "Project" as Project {
        +path: <string>
        +config: <Object>
    }
    Idk "1" o-- "0..*" Project
@enduml

@startuml IDKApplication
    title IDK Application

    node "Node.js Runtime" as NodeJS {
        database "env.idk" as Environment [[./Environment.svg]]
        NodeJS "1" *- "1" Environment
        package "@imazzine/idk@0.0.0" as idkPackage {
            interface "IDK Command" as IDKCommandInterface [[./IDKCommandInterface.svg]] #c9ffc7
            frame "node_modules" as node_modules {

                package "commander@2.20.0" as CommanderPackage {
                    component "Commander" as CommanderComponent [[https://www.npmjs.com/package/commander]]
                    interface "Command API" as CommandAPI [[http://tj.github.io/commander.js/#Command]] #ffc7fd
                    CommanderComponent -- CommandAPI
                }

                package "@imazzine/idk.help@0.0.0" as HelpPackage {
                    component "Help Command" as HelpCommand [[./HelpCommand.svg]]
                    CommandAPI )-- HelpCommand
                    HelpCommand -- IDKCommandInterface
                }
                CommanderPackage -[hidden]- HelpPackage

                package "@imazzine/idk.version@0.0.0" as VersionPackage {
                    component "Version Command" as VersionCommand [[./VersionCommand.svg]]
                    CommandAPI )-- VersionCommand
                    VersionCommand -- IDKCommandInterface
                }
                HelpPackage -[hidden]- VersionPackage

                package "@imazzine/idk.commands@0.0.0" as CommandsPackage {
                    component "Commands Command" as CommandsCommand [[./CommandsCommand.svg]]
                    CommandAPI )-- CommandsCommand
                    CommandsCommand -- IDKCommandInterface
                }
                VersionPackage -[hidden]- CommandsPackage

                package "@imazzine/idk.projects@0.0.0" as ProjectsPackage {
                    component "Projects Command" as ProjectsCommand [[./ProjectsCommand.svg]]
                    CommandAPI )-- ProjectsCommand  
                    ProjectsCommand -- IDKCommandInterface
                }
                CommanderPackage -[hidden]- ProjectsPackage

                package "@imazzine/idk.list@0.0.0" as ListPackage {
                    component "List Command" as ListCommand [[./ListCommand.svg]]
                    CommandAPI )-- ListCommand
                    ListCommand -- IDKCommandInterface
                }
                ProjectsPackage -[hidden]- ListPackage

                package "@imazzine/idk.lint@0.0.0" as LintPackage {
                    component "Lint Command" as LintCommand [[./LintCommand.svg]]
                    CommandAPI )-- LintCommand
                    LintCommand -- IDKCommandInterface
                }
                ListPackage -[hidden]- LintPackage

                package "@imazzine/idk.test@0.0.0" as TestPackage {
                    component "Test Command" as TestCommand [[./TestCommand.svg]]
                    CommandAPI )-- TestCommand
                    TestCommand -- IDKCommandInterface
                }
                CommanderPackage -[hidden]- TestPackage

                package "@imazzine/idk.document@0.0.0" as DocumentPackage {
                    component "Document Command" as DocumentCommand [[./DocumentCommand.svg]]
                    CommandAPI )-- DocumentCommand
                    DocumentCommand -- IDKCommandInterface
                }
                TestPackage -[hidden]- DocumentPackage

                package "@imazzine/idk.compile@0.0.0" as CompilePackage {
                    component "Compile Command" as CompileCommand [[./CompileCommand.svg]]
                    CommandAPI )-- CompileCommand
                    CompileCommand -- IDKCommandInterface
                }
                DocumentPackage -[hidden]- CompilePackage

                package "@imazzine/idk.build@0.0.0" as BuildPackage {
                    component "Build Command" as BuildCommand [[./BuildCommand.svg]]
                    CommandAPI )-- BuildCommand
                    BuildCommand -- IDKCommandInterface
                }
            }
            database "package.json" as ConfigurationDB
            interface "Configuration API" as ConfigurationAPI [[./ConfigurationAPI.svg]] #ffc7fd
            ConfigurationDB -- ConfigurationAPI

            interface "process" as process [[https://nodejs.org/dist/latest-v10.x/docs/api/process.html]] #ffc7fd

            component "IDK Executor" as IDKExecutor [[./IDKExecutor.svg]]
            ConfigurationAPI )-- IDKExecutor
            IDKExecutor -( IDKCommandInterface
            process )- IDKExecutor

        }
    }
    NodeJS -- process
@enduml

@startuml IDKCommandInterface
    title IDK Command Interface

    object export {
        +help(): <void>
        +execute(argv: <Array<string>>): <void>
    }
@enduml

@startuml Environment
    title Process IDK Environment Interface

    object "process.env.idk" as Idk {
        +version: <string>
        +commands: <Array<Command>>
        +projects: <Array<Project>>
        +current: <Project|boolean>
    }

    object "Command" as Command {
        +path: <string>
        +config: <Object>
    }
    Idk "1" o-- "0..*" Command

    object "Project" as Project {
        +path: <string>
        +config: <Object>
    }
    Idk "1" o-- "0..*" Project
@enduml

@startuml IDKExecutor
    title IDK Executor

|main|
    start
        :const process;/
        :process.env.idk = process.env.idk || {};]
        if (!process.env.idk) then (yes)
            :process.env.idk =
            getIdk('./package.json');]
|getIdk|
            :path/
            :const package = readJson(path);]
            :package['idk'].version = package.version;]
            :return package['idk'];/
|main|
        endif
        if (!process.env.idk.current) then (yes)
            :process.env.idk.current =
            getCurrent(process.cwd());|
|getCurrent|
            :path/
            repeat
                :const pjson = path.resolve(path, './package.json');]
                if (exist(pjson)) then (yes)
                    :const package = readJson(pjson);]
                    if (package.idk &&
process.env.idk.version ===
package.idk.version) then (yes)
                        :const current = {};]
                        :current.path = path;]
                        :current.config = package.idk.config;]
                        :const projects = process.env.idk.projects]
                        while (let i = 0; i < projects.length; i++)
                            if (projects[i].path === current.path) then (yes)
                                :current.config = _.union(
                                    current.config,
                                    projects[i].config
                                );]
                            endif
                        endwhile
                        :return current;/
                        (A)
                        detach
                    endif
                endif
                :const prev = path;]
                :path = path.resolve(path, './..'); ]
            repeat while (path !== prev) is (yes)
            ->no;
            :return false;/
            (A)
            detach
|main|
        endif
        (A)
        :const commands = process.env.idk.commands]
        while (let i = 0; i < commands.length; i++)
            :require
                .ensure(commands[i].path)
                .then((command)=>{
                    command.execute(process.argv)
                });|
        endwhile
    end
@enduml

@startuml HelpCommand
    title Help Command

    start
        : [[./Environment.svg idk]] /
        :const commands = idk.commands]
        while (let i = 0; i < commands.length; i++)
            :require
                .ensure(commands[i].path)
                .then((command)=>{
                    command.help()
                });|
        endwhile
    end
@enduml

@startuml VersionCommand
    title Version Command

    start
        : [[./Environment.svg idk]] /
        :idk.version/
    end
@enduml

@startuml CommandsCommand
    title Commands Command

    start
        : [[./Environment.svg idk]],\naction, package_path,\nconfig_action, config_key,\nconfig_value /
        note right
            <b>idk commands <action> <package_path> [config_action] [config_key] [config_value]</b>
            
            <b><action></b> Required. Specify action type over the [[./IDKCommandInterface.svg IDK Command Javascript Interface]] interface specified in <b><package_path></b> parameter:
                
                <b>add</b> - add specified interface to commands register;
                <b>configure</b> - set/unset specified interface configuration parameter;
                <b>remove</b> - remove specified interface from commands register;
            
            <b><package_path></b> Required. Globally installed NPM package name or absolute file path to the Javascript file with [[./IDKCommandInterface.svg IDK Command Javascript Interface]].
            
            <b>[config_action]</b> Required with <b>configure</b> <b><action></b>. Ignored for the rest of <b><action></b>s. Specify action over the configuration parameter specified in <b>[config_key]</b>.
            Throw if <b>[config_key]</b> did not specified:
                
                <b>set</b> - set (or update if exist) parameter using <b>[config_value]</b> parameter as a value. Throw if <b>[config_value]</b> did not specified.
                <b>unset</b> - remove <b>[config_key]</b> parameter from the register if exist. Do nothing otherwise.
            
            <b>[config_key]</b> Required for <b>configure</b> <b><action></b>. Ignored for the rest of <b><action></b>s. Specify configuration action parameter name.
            
            <b>[config_value]</b> Required for <b>configure</b> <b><action></b> with <b>set</b> <b>[config_action]</b>. Ignored for the rest of <b><action></b>s and <b>[config_action]</b>s.
        end note
        if (action == "add") then (yes)
            if (!package_path) then (yes)
                :package_path required/
                  stop
            endif
            :const cmd = await require
                .ensure(package_path);]
            if (!cmd || !cmd.help || !cmd.execute) then (yes)
                :required module is not IDK
                Command Javascript Interface/
                stop
            endif
            while (let i = 0; i < idk.commands.length; i++)
                if (idk.commands[i].path == package_path) then (yes)
                    :specified command already registered/
                    stop
                endif
            endwhile
            :idk.commands.push({
                path: package_path,
                config: {}})|
        elseif (action == "remove") then (yes)

        elseif (action == "configure") then (yes)

        else (no)

        endif
    end
@enduml

@startuml ProjectsCommand
    title Projects Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml ListCommand
    title List Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml LintCommand
    title Lint Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml TestCommand
    title Test Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml DocumentCommand
    title Document Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml CompileCommand
    title Compile Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml

@startuml BuildCommand
    title Build Command

    start
        : [[./Environment.svg idk]] /
    end
@enduml