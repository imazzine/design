@startuml devices_circle
    node "Version Control Server" as VCServer
    node "Package Manager Server" as PackageServer
    node "CI/CD Server" as CICDServer
    node "Producer" as Developer
    node "Consumer" as User

    interface "Ethernet" as Ethernet

    VCServer -( Ethernet
    CICDServer --( Ethernet
    Ethernet )- PackageServer
    Ethernet )-- Developer
    Ethernet )-- User
@enduml

@startuml anonymous_boxes
    title Anonymous Boxes

    node "Version Control Server" as VCServer {
        database "VC Repository" as VCRepo
        node "VC Service" as VCService
        VCRepo <- VCService: use
    }
    interface "VC Service API" as VCServiceAPI
    interface "VC Interface" as VCInterface
    VCService -- VCServiceAPI
    VCService -- VCInterface
    
    node "Package Manager Server" as PackageServer {
        node "Package Manager Service" as PackageService
        database "Package" as PackagePackage
        PackageService -> PackagePackage: use
    }
    interface "Package Manager Interface" as PackageInterface
    PackageService -- PackageInterface

    node "CI/CD Server" as CICDServer {
        node "CI/CD Service" as CICDService
    }
    interface "CI/CD Interface" as CICDInterface
    CICDService -- CICDInterface
    VCServiceAPI )-- CICDService
    VCInterface )- CICDService
    CICDService --( PackageInterface
    
    node "Producer" as Producer {
        node "VC Client" as VCClient
        interface "VC CLI" as VC_CLI
        VCClient -- VC_CLI

        file "Source files" as Sources
        file "CI/CD Config" as CICDConf
        file "Package Config" as PackageConfig
        VCRepo "0..*" o-- Sources
        Sources *-- CICDConf
        Sources *-- PackageConfig
        VCInterface )-- VCClient
        CICDInterface )-- CICDConf
        PackageInterface )-- PackageConfig
    }

    node "Consumer" as Consumer {
        node "Package Manager Client" as PackageClient
        interface "Package Manager CLI" as Package_CLI
        PackageInterface )-- PackageClient
        PackageClient -- Package_CLI

        file "Binaries" as Binaries
        interface "API" as API
        PackagePackage "0..*" o-- Binaries
        PackageClient -> Binaries: install
        Binaries -- API
    }
@enduml

@startuml anonymous_build_flow
    title Anonymous Build Flow
    start
        if (static analysis) then (passed)
            -[#green]->
            if (tests execution) then (passed)
                -[#green]->
                if (documentation export) then (passed)
                    -[#green]->
                    if (compiling) then (passed)
                        -[#green]->
                        if (publishing) then (passed)
                            -[#green]->
                            :info/
                        else (failed)
                            (A)
                        endif
                    else (failed)
                        (A)
                    endif
                else (failed)
                    (A)
                endif
            else (failed)
                (A)
            endif
        else (failed)
            (A)
        endif
    end

    (A)
    :error/
    stop
@enduml

@startuml named_boxes
    title Named Boxes
    
    node "github.com" as GITServer {
        database "GIT Repository" as GITRepo
        node "GIT Service" as GITService
        GITRepo <- GITService: use
    }
    interface "Webhooks" as Webhooks
    interface "GIT Interface" as GITInterface
    GITService -- Webhooks
    GITService -- GITInterface
    
    node "npmjs.com" as NPMServer {
        node "NPM Service" as NPMService
        database "NPM Package" as NPMPackage
        NPMService -> NPMPackage: use
    }
    interface "NPM Interface" as NPMInterface
    NPMService -- NPMInterface

    node "travis-ci.com" as CICDServer {
        node "CI/CD Service" as CICDService
    }
    interface "Travis API" as CICDInterface
    CICDService -- CICDInterface
    Webhooks )-- CICDService
    GITInterface )- CICDService
    CICDService --( NPMInterface

    node "hub.docker.com" as ContainerServer {
        node "Continer Service" as ContainerService
    }
    interface "Docker Interface" as ContainerInterface
    ContainerService -- ContainerInterface
    ContainerInterface )-- CICDService
    
    node "coveralls.io" as CoverageServer {
        node "Coverage Service" as CoverageService
    }
    interface "node-coveralls" as CoverageInterface
    CoverageService -- CoverageInterface
    CoverageInterface )-- CICDService
    
    node "Producer" as Producer {
        node "GIT Client" as GITClient
        interface "GIT CLI" as GIT_CLI
        GITClient -- GIT_CLI

        file "Source files" as Sources
        file ".travis.yml" as CICDConf
        file "package.json" as NPMConfig
        ' file "Dockerfile" as DockerCongig
        GITRepo "0..*" o-- Sources
        Sources *-- CICDConf
        Sources *-- NPMConfig
        ' Sources *-- DockerCongig
        GITInterface )-- GITClient
        CICDInterface )-- CICDConf
        NPMInterface )-- NPMConfig
        ' ContainerInterface )-- DockerCongig
    }

    node "Consumer" as Consumer {
        node "NPM Client" as NPMClient
        interface "NPM CLI" as BIN
        NPMInterface )-- NPMClient
        NPMClient -- BIN

        file "Binaries" as Binaries
        interface "JS API" as API
        NPMPackage "0..*" o-- Binaries
        NPMClient -> Binaries: install
        Binaries -- API
    }
@enduml

@startuml named_build_flow
    title Named Build Flow
    start
        :Supported Node.js versions: 6,7,8,9,10,11,12}
        while (for each version)
            if (npm i) then (passed)
                -[#green]->
                if (eslint) then (passed)
                    -[#green]->
                    if (jest) then (passed)
                        -[#green]->
                        if (coveralls) then (passed)
                            -[#green]->
                            if (jsdoc) then (passed)
                                -[#green]->
                                if (webpack) then (passed)
                                    -[#green]->
                                    if (npm publish) then (passed)
                                        -[#green]->
                                        :stdout/
                                    else (failed)
                                        (A)
                                    endif
                                else (failed)
                                    (A)
                                endif
                            else (failed)
                                (A)
                            endif
                        else (failed)
                            (A)
                        endif
                    else (failed)
                        (A)
                    endif
                else (failed)
                    (A)
                endif
            else (failed)
                (A)
            endif
        endwhile
    end
    detach
    (A)
    :stderr/
    stop
@enduml