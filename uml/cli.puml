@startuml devices_circle
    node "Version Control Server" as VCServer
    node "Package Manager Server" as PackageServer
    node "CI/CD Server" as CICDServer
    node "Producer" as Developer
    node "Consumer" as User

    interface "Ethernet" as Ethernet

    VCServer -( Ethernet
    CICDServer --( Ethernet
    Ethernet )- PackageServer
    Ethernet )-- Developer
    Ethernet )-- User
@enduml

@startuml anonymous_boxes
    
    node "Version Control Server" as VCServer {
        database "VC Repository" as VCRepo
        node "VC Service" as VCService
        VCRepo <- VCService: use
    }
    interface "VC Service API" as VCServiceAPI
    interface "VC Interface" as VCInterface
    VCService -- VCServiceAPI
    VCService -- VCInterface
    
    node "Package Manager Server" as PackageServer {
        node "Package Manager Service" as PackageService
        database "Package" as PackagePackage
        PackageService -> PackagePackage: use
    }
    interface "Package Manager Interface" as PackageInterface
    PackageService -- PackageInterface

    node "CI/CD Server" as CICDServer {
        node "CI/CD Service" as CICDService
    }
    interface "CI/CD Interface" as CICDInterface
    CICDService -- CICDInterface
    VCServiceAPI )-- CICDService
    VCInterface )- CICDService
    CICDService --( PackageInterface
    
    node "Producer" as Producer {
        node "VC Client" as VCClient
        interface "VC CLI" as VC_CLI
        VCClient -- VC_CLI

        file "Source files" as Sources
        file "CI/CD Config" as CICDConf
        file "Package Config" as PackageConfig
        VCRepo "0..*" o-- Sources
        Sources *-- CICDConf
        Sources *-- PackageConfig
        VCInterface )-- VCClient
        CICDInterface )-- CICDConf
        PackageInterface )-- PackageConfig
    }

    node "Consumer" as Consumer {
        node "Package Manager Client" as PackageClientC
        interface "Package Manager CLI" as Package_CLI_C
        PackageInterface )-- PackageClientC
        PackageClientC -- Package_CLI_C

        node "Package Runner" as PackageRunner
        PackageClientC --* PackageRunner

        file "Binaries" as Binaries
        PackagePackage "0..*" o-- Binaries
        Binaries <-- PackageRunner: run
    }
@enduml

@startuml named_boxes
    
    node "github.com" as GITServer {
        database "GIT Repository" as GITRepo
        node "GIT Service" as GITService
        GITRepo <- GITService: use
    }
    interface "Webhooks" as Webhooks
    interface "GIT Interface" as GITInterface
    GITService -- Webhooks
    GITService -- GITInterface
    
    node "npmjs.com" as NPMServer {
        node "NPM Service" as NPMService
        database "NPM Package" as NPMPackage
        NPMService -> NPMPackage: use
    }
    interface "NPM Interface" as NPMInterface
    NPMService -- NPMInterface

    node "travis-ci.com" as CICDServer {
        node "CI/CD Service" as CICDService
    }
    interface "Travis API" as CICDInterface
    CICDService -- CICDInterface
    Webhooks )-- CICDService
    GITInterface )- CICDService
    CICDService --( NPMInterface

    node "hub.docker.com" as ContainerServer {
        node "Continer Service" as ContainerService
    }
    interface "Docker CLI" as ContainerInterface
    ContainerService -- ContainerInterface
    ContainerInterface )-- CICDService
    
    node "coveralls.io" as CoverageServer {
        node "Coverage Service" as CoverageService
    }
    interface "node-coveralls" as CoverageInterface
    CoverageService -- CoverageInterface
    CoverageInterface )-- CICDService
    
    node "Producer" as Producer {
        node "GIT Client" as GITClient
        interface "GIT CLI" as GIT_CLI
        GITClient -- GIT_CLI

        ' node "NPM Client" as NPMClientP
        ' interface "NPM CLI" as NPM_CLI_P
        ' NPMInterface -- NPMClientP 
        ' NPMClientP -- NPM_CLI_P

        file "Source files" as Sources
        file ".travis.yml" as CICDConf
        file "package.json" as NPMConfig
        GITRepo "0..*" o-- Sources
        Sources *-- CICDConf
        Sources *-- NPMConfig
        GITInterface )-- GITClient
        CICDInterface )-- CICDConf
        NPMInterface )-- NPMConfig
    }

    node "Consumer" as Consumer {
        node "NPM Client" as NPMClientC
        interface "NPM CLI" as BIN
        NPMInterface )-- NPMClientC
        NPMClientC -- BIN

        node "Node.js" as NodeJS
        NPMClientC --* NodeJS

        file "Binaries" as Binaries
        NPMPackage "0..*" o-- Binaries
        Binaries <-- NodeJS: run
    }
@enduml